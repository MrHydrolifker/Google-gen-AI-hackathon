<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI-Powered Mental Health Chatbot</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #e0f7fa;
            color: #004d40;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            transition: background-color 0.3s, color 0.3s;
        }
        #chatbot {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            width: 400px;
            height: 600px;
            display: flex;
            flex-direction: column;
        }
        #messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            border-bottom: 2px solid #004d40;
        }
        .user-message {
            text-align: right;
            margin: 10px 0;
            background-color: #c8e6c9;
            padding: 10px;
            border-radius: 5px;
            display: inline-block;
            max-width: 75%;
        }
        .bot-message {
            text-align: left;
            margin: 10px 0;
            background-color: #bbdefb;
            padding: 10px;
            border-radius: 5px;
            display: inline-block;
            max-width: 75%;
        }
        .typing-indicator {
            font-style: italic;
            color: #888;
            margin: 10px 0;
        }
        #input-container {
            display: flex;
            padding: 10px;
            border-top: 2px solid #004d40;
        }
        #user-input {
            flex: 1;
            padding: 10px;
            border: 2px solid #004d40;
            border-radius: 5px;
            transition: border-color 0.3s;
        }
        #user-input:focus {
            border-color: #00796b;
            outline: none;
        }
        #send-btn {
            background-color: #004d40;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            margin-left: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #send-btn:hover {
            background-color: #00332d;
        }
        #feedback {
            display: none;
            margin: 10px 0;
            border: 2px solid #004d40;
            border-radius: 5px;
            padding: 10px;
        }
        #feedback label {
            margin-right: 10px;
        }
        #toggle-theme {
            margin: 10px;
            cursor: pointer;
            background-color: #004d40;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 5px;
        }
        #toggle-theme:hover {
            background-color: #00332d;
        }
        .dark-mode {
            background-color: #212121;
            color: #ffffff;
        }
        .dark-mode #chatbot {
            background-color: #424242;
        }
        .dark-mode .user-message {
            background-color: #66bb6a;
        }
        .dark-mode .bot-message {
            background-color: #42a5f5;
        }
    </style>
</head>
<body>
    <button id="toggle-theme">Toggle Dark Mode</button>
    <div id="chatbot">
        <div id="messages"></div>
        <div id="input-container">
            <input type="text" id="user-input" placeholder="How can I help you?" />
            <button id="send-btn">Send</button>
        </div>
        <div id="feedback">
            <label for="user-rating">Rate the response: </label>
            <select id="user-rating">
                <option value="positive">üòä Positive</option>
                <option value="neutral">üòê Neutral</option>
                <option value="negative">üò¢ Negative</option>
            </select>
            <button id="submit-rating">Submit</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script>
        const messagesContainer = document.getElementById('messages');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-btn');
        const feedbackSection = document.getElementById('feedback');
        const userRating = document.getElementById('user-rating');
        const submitRating = document.getElementById('submit-rating');
        const toggleTheme = document.getElementById('toggle-theme');

        let isDarkMode = false;

        sendButton.addEventListener('click', sendMessage);
        submitRating.addEventListener('click', submitUserRating);
        toggleTheme.addEventListener('click', toggleDarkMode);

        function sendMessage() {
            const userMessage = userInput.value;
            if (!userMessage) return;

            displayMessage(userMessage, 'user');
            userInput.value = '';

            // Simulate bot typing
            simulateBotTyping(userMessage);
        }

        function displayMessage(message, sender) {
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            messageElement.className = sender === 'user' ? 'user-message' : 'bot-message';
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight; // Scroll to bottom

            // Show feedback section for bot messages
            if (sender === 'bot') {
                feedbackSection.style.display = 'block';
            }
        }

        async function simulateBotTyping(userMessage) {
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing-indicator';
            typingIndicator.textContent = "Bot is typing...";
            messagesContainer.appendChild(typingIndicator);
            messagesContainer.scrollTop = messagesContainer.scrollHeight; // Scroll to bottom

            // Simulate a delay before the bot responds
            setTimeout(() => {
                messagesContainer.removeChild(typingIndicator);
                fetchResponse(userMessage);
            }, 1500); // Typing delay of 1.5 seconds
        }

        async function fetchResponse(userMessage) {
            const apiKey = "YOUR_GEMINI_API_KEY"; // Replace with your Gemini API Key
            const apiUrl = "YOUR_GEMINI_API_ENDPOINT"; // Replace with your Gemini API endpoint

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    prompt: userMessage,
                    maxTokens: 150,
                    temperature: 0.7
                })
            });

            if (!response.ok) {
                displayMessage("Error fetching response from AI.", 'bot');
                return;
            }

            const data = await response.json();
            const botMessage = data.response || "Sorry, I didn't understand that.";
            displayMessage(botMessage, 'bot');

            // Perform sentiment analysis
            analyzeSentiment(userMessage);
        }

        async function analyzeSentiment(text) {
            // Here you can add your sentiment analysis logic using TensorFlow.js
            console.log(`Analyzing sentiment for: ${text}`);
            // For example, use a pre-trained model for emotion detection
            // This is a placeholder for actual sentiment analysis
        }

        function submitUserRating() {
            const rating = userRating.value;
            console.log(`User rated the response as: ${rating}`);
            feedbackSection.style.display = 'none'; // Hide feedback section after submitting
        }

        function toggleDarkMode() {
            isDarkMode = !isDarkMode;
            document.body.classList.toggle('dark-mode', isDarkMode);
        }
    </script>
</body>
</html>
